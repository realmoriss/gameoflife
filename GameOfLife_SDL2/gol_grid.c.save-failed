#include <stdlib.h>
#include <stdio.h>
#include <SDL.h>
#include "gol_grid.h"

Grid *grid_new(const int size_startx, const int size_starty) {
    // Ha valamelyik parameter erteke kisebb mint nulla akkor alapertelmezett mereture allitjuk a gridet
    // Nem biztos, hogy a legjobb hibakezelesi mod, de dob egy warningot a stderr-ra miatta
    Grid *grid = malloc(sizeof(Grid));
    if (size_startx < 0) {
        grid->cap_x = GRID_SIZE_DEFAULT + GRID_CAP_OVERHEAD;
        grid->size_x = GRID_SIZE_DEFAULT;
        fprintf(stderr, "Figyelmeztetes: Ervenytelen x meretet adtal meg a grid letrehozasanal!\n");
    } else {
        grid->cap_x = size_startx + GRID_CAP_OVERHEAD;
        grid->size_x = size_startx;
    }
    if (size_starty < 0) {
        grid->cap_y = GRID_SIZE_DEFAULT + GRID_CAP_OVERHEAD;
        grid->size_y = GRID_SIZE_DEFAULT;
        fprintf(stderr, "Figyelmeztetes: Ervenytelen y meretet adtal meg a grid letrehozasanal!\n");
    } else {
        grid->cap_y = size_starty + GRID_CAP_OVERHEAD;
        grid->size_y = size_starty;
    }

    grid->cells = malloc(sizeof(Cell *)*grid->cap_x);
    int i;
    for (i=0; i<grid->cap_x; i++) {
        grid->cells[i] = malloc(sizeof(Cell)*grid->cap_y);
    }
    return grid;
}

void grid_free(Grid **grid) {
    // Fel kell szabaditani minden oszlopot, utana pedig a sort
    Grid *grid_var = *grid;
    int i;
    for (i=0; i<grid_var->cap_x; i++) {
        free(grid_var->cells[i]);
    }
    free(grid_var->cells);
    free(grid);
    grid = NULL;
}

void grid_init(Grid *grid) {
    int i,j;
    Cell new_cell = {dead, dead};
    for (i=0; i<grid->size_x; i++) {
        for (j=0; j<grid->size_y; j++) {
            grid->cells[i][j] = new_cell;
        }
    }
}

void grid_set_sizex(Grid *grid) {
    int i, old_cap;
    // A +2 amiatt kell, hogy a grid korben halott cellakbol alljon - elkerulve a tulindexeles vizsgalatat.
    while (grid->cap_x < grid->size_x+2) {
        old_cap = grid->cap_x;
        grid->cap_x += GRID_CAP_OVERHEAD;
        grid->cells = realloc(grid->cells, sizeof(Cell *)*grid->cap_x);
        for (i=old_cap; i<grid->cap_x; i++) {
            grid->cells[i] = malloc(sizeof(Cell)*grid->cap_y);
        }
    }
}

void grid_set_sizey(Grid *grid) {
    int i;
    // A +2 amiatt kell, hogy a grid korben halott cellakbol alljon - elkerulve a tulindexeles vizsgalatat.
    while (grid->cap_y < grid->size_y+2) {
        grid->cap_y += GRID_CAP_OVERHEAD;
        for (i=0; i<grid->cap_y; i++) {
            grid->cells[i] = realloc(grid->cells[i], sizeof(Cell)*grid->cap_y);
        }
    }
}

void grid_set(Grid *grid, const int x, const int y, const Cell cell) {
    int i,j,old_size;
    Cell new_cell = {dead, dead};
    // Ellenorizzuk le, hogy a tomb szelessege elegendo-e
    if (grid->size_x <= x+2) {
        old_size = grid->size_x;
        grid->size_x = x+2;
        grid_set_sizex(grid);
        // Az uj elemeket allitsuk alapertelmezett ertekure
        for (i=old_size; i<grid->size_x; i++) {
            for (j=0; j<grid->size_y; j++) {
                grid->cells[i][j] = new_cell;
            }
        }
    }
    // Ellenorizzuk le, hogy a tomb magassaga elegendo-e
    if (grid->size_y <= y+2) {
        old_size = grid->size_y;
        grid->size_y = y+2;
        grid_set_sizex(grid);
        // Az uj elemeket allitsuk alapertelmezett ertekure
        for (i=0; i<grid->cap_x; i++) {
            for (j=old_size; j<grid->size_y; j++) {
                grid->cells[i][j] = new_cell;
            }
        }
    }
    grid->cells[x][y] = cell;
}

Cell grid_get(Grid *grid, const int x, const int y) {
    return grid->cells[x][y];
}
